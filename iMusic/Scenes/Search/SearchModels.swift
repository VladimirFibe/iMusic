//
//  SearchModels.swift
//  iMusic
//
//  Created by MacService on 21.04.2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

enum Search
{
  enum Something {
    struct Request {
      var searchText: String
    }
    struct Response {
      var searchResponse: SearchResponse?
    }
    struct ViewModel {
      var cells: [Cell]
      struct Cell {
        var iconUrlString: String
        var trackName: String
        var artistName: String
        var collectionName: String
        var previewUrl: String?
      }
    }
  }
}

class SearchViewModel: NSObject, NSCoding {
  func encode(with coder: NSCoder) {
    coder.encode(cells, forKey: "cells")
  }
  
  required init?(coder: NSCoder) {
    cells = coder.decodeObject(forKey: "cells") as? [SearchViewModel.Cell] ?? []
  }
  
  @objc(_TtCC6iMusic15SearchViewModel4Cell)class Cell: NSObject, NSCoding, Identifiable {
    
    var id = UUID()
    var iconUrlString: String?
    var trackName: String
    var collectionName: String
    var artistName: String
    var previewUrl: String?
    
    func encode(with coder: NSCoder) {
      coder.encode(iconUrlString, forKey: "iconUrlString")
      coder.encode(trackName, forKey: "trackName")
      coder.encode(collectionName, forKey: "collectionName")
      coder.encode(artistName, forKey: "artistName")
      coder.encode(previewUrl, forKey: "previewUrl")
    }
    
    required init?(coder: NSCoder) {
      iconUrlString = coder.decodeObject(forKey: "iconUrlString") as? String
      trackName = coder.decodeObject(forKey: "trackName") as? String ?? ""
      collectionName = coder.decodeObject(forKey: "collectionName") as? String ?? ""
      artistName = coder.decodeObject(forKey: "artistName") as? String ?? ""
      previewUrl = coder.decodeObject(forKey: "previewUrl") as? String
    }
    init(with track: Search.Something.ViewModel.Cell) {
      self.iconUrlString = track.iconUrlString
      self.trackName = track.trackName
      self.collectionName = track.collectionName
      self.artistName = track.artistName
      self.previewUrl = track.previewUrl
    }
    init(iconUrlString: String?,
         trackName: String,
         collectionName: String,
         artistName: String,
         previewUrl: String?) {
      self.iconUrlString = iconUrlString
      self.trackName = trackName
      self.collectionName = collectionName
      self.artistName = artistName
      self.previewUrl = previewUrl
    }
    var cell: Search.Something.ViewModel.Cell {
      Search.Something.ViewModel.Cell(
        iconUrlString: self.iconUrlString ?? "",
        trackName: self.trackName,
        artistName: self.artistName,
        collectionName: self.collectionName,
        previewUrl: self.previewUrl)
    }
  }
  init(cells: [Cell]) {
    self.cells = cells
  }
  
  let cells: [Cell]
}
