//
//  SearchViewController.swift
//  iMusic
//
//  Created by MacService on 21.04.2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SearchDisplayLogic: AnyObject
{
  func displayLoader()
  func displaySomething(viewModel: Search.Something.ViewModel)
}

class SearchViewController: UITableViewController, SearchDisplayLogic {
  var interactor: SearchBusinessLogic?
  var router: (NSObjectProtocol & SearchRoutingLogic & SearchDataPassing)?
  private var searchViewModel = Search.Something.ViewModel(cells: [])
  let searchController = UISearchController(searchResultsController: nil)
  private var timer: Timer?
  private lazy var footerView = FooterView()
  
  // MARK: Object lifecycle
  
  override init(style: UITableView.Style) {
    super.init(style: style)
    setup()
  }
  
  required init?(coder: NSCoder) {
    super.init(coder: coder)
    setup()
    fatalError("init(coder:) has not been implemented")
  }
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = SearchInteractor()
    let presenter = SearchPresenter()
    let router = SearchRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    view.backgroundColor = .white
    tableView.register(TrackCell.self, forCellReuseIdentifier: TrackCell.reuseId)
    tableView.tableFooterView = footerView
    navigationItem.searchController = searchController
    navigationItem.hidesSearchBarWhenScrolling = false
    searchController.searchBar.delegate = self
    searchController.obscuresBackgroundDuringPresentation = false
    searchBar(searchController.searchBar, textDidChange: "minacelentano")
  }
  
  // MARK: Do something
  
  //@IBOutlet weak var nameTextField: UITextField!
  
  func doSomething(_ text: String)
  {
    let request = Search.Something.Request(searchText: text)
    interactor?.doSomething(request: request)
  }
  
  func displayLoader() {
    footerView.showLoader()
    searchViewModel.cells = []
    tableView.reloadData()
  }
  func displaySomething(viewModel: Search.Something.ViewModel)
  {

    footerView.hideLoader()
    searchViewModel = viewModel
    tableView.reloadData()

    //nameTextField.text = viewModel.name
  }
  
  override func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
    84.0
  }
  override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
    searchViewModel.cells.count
  }
  
  override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
    let cell = tableView.dequeueReusableCell(withIdentifier: TrackCell.reuseId, for: indexPath) as! TrackCell
    let track = searchViewModel.cells[indexPath.row]
    cell.configure(with: track)
    return cell
  }
  
  override func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
    let label = UILabel()
    label.text = "Please enter search term above..."
    label.textAlignment = .center
    label.font = UIFont.systemFont(ofSize: 18, weight: .semibold)
    return label
  }
  
  override func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
    searchViewModel.cells.isEmpty ? 100 : 0
  }
  
  override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
    let track = searchViewModel.cells[indexPath.row]
    let keyWindow = UIApplication
      .shared
      .connectedScenes
      .filter({$0.activationState == .foregroundActive })
      .compactMap { $0 as? UIWindowScene }
      .first?.windows
      .filter({ $0.isKeyWindow }).first
    let trackDetailsView = TrackdetailView(frame: .zero)
    trackDetailsView.configure(with: track)
    trackDetailsView.delegate = self
    keyWindow?.addSubview(trackDetailsView)
    trackDetailsView.anchor(top: keyWindow?.safeAreaLayoutGuide.topAnchor, left: keyWindow?.leftAnchor, bottom: keyWindow?.bottomAnchor, right: keyWindow?.rightAnchor)
  }
}

// MARK: - UISearchBarDelegate
extension SearchViewController: UISearchBarDelegate {
  func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
    timer?.invalidate()
    timer = Timer.scheduledTimer(withTimeInterval: 0.5, repeats: false, block: { _ in
      self.doSomething(searchText)
    })
  }
}
// MARK: - TrackMovingDelegate
extension SearchViewController: TrackMovingDelegate {
  func getTrack(isForwardTrack: Bool) -> Search.Something.ViewModel.Cell? {
    guard let indexPath = tableView.indexPathForSelectedRow else { return nil }
    tableView.deselectRow(at: indexPath, animated: true)
    let sign = isForwardTrack ? 1 : -1
    let count = searchViewModel.cells.count
    let row = (indexPath.row + count + sign) % count
    let nextIndexPath = IndexPath(row: row, section: indexPath.section)
    tableView.selectRow(at: nextIndexPath, animated: true, scrollPosition: .none)
    let cellViewModel = searchViewModel.cells[nextIndexPath.row]
    return cellViewModel
  }
}
